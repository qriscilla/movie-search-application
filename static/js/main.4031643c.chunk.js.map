{"version":3,"sources":["components/Form.js","components/Movies.js","App.js","components/Movie.js","components/Router.js","serviceWorker.js","index.js","noImage.png"],"names":["Form","props","onSubmit","movieAPI","style","marginBottom","className","icon","faSearch","type","placeholder","name","Movies","movies","map","movie","key","id","poster_path","src","alt","title","noImage","length","substring","release_date","Link","textDecoration","to","pathname","state","API_KEY","App","e","a","movieTitle","target","elements","value","preventDefault","fetch","api_call","json","data","setState","results","console","log","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","Component","Movie","activeMovie","location","req","res","overview","React","Router","HashRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4031643c.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nconst Form = props => (\n    <form onSubmit={props.movieAPI} style={{marginBottom:'2rem'}}>\n        <button className='search-button'><FontAwesomeIcon className='fontIcon' icon={faSearch} /></button>\n        <span><input className='search-input' type='text' placeholder='search a movie' name='movieTitle'></input></span>\n    </form>    \n);\n\nexport default Form;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport noImage from '../noImage.png';\n\nconst Movies = props => (\n    <div className='container'>\n        <div className='row'>\n            {props.movies.map((movie) => {\n                return (\n                    <div key={movie.id} className='col-md-4' style={{marginBottom:'2rem'}}>\n                        <div className='movies-card'>\n                            { movie.poster_path !== null \n                                ? (<img className='movies-img' src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title}></img>)\n                                : (<img className='movies-img' src={noImage} alt={movie.title}></img>)\n                            }\n                            <div className='movies-card-info'>\n                                <h5 className='info'>{movie.title.length < 27 ? `${movie.title}` : `${movie.title.substring(0,27)}...`}</h5>\n                                <p className='info'>({movie.release_date.substring(0,4)})</p>\n                                <button className='movies-card-button'>\n                                    <Link \n                                        className='movies-card-link' \n                                        style={{textDecoration:'none'}}\n                                        to={{ \n                                        pathname: `/movie/${movie.id}`,\n                                        state: {movie: movie.title}\n                                    }}>Details</Link>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    </div>\n);\n\nexport default Movies;","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Movies from './components/Movies';\n\nconst API_KEY = '37cbb44eaa2f92cdb9ef7ba91a012e48';\n\nclass App extends Component {\n\n  state = {\n    movies: []\n  }\n\n  movieAPI = async (e) => {\n    const movieTitle = e.target.elements.movieTitle.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${movieTitle}`);\n    const data = await api_call.json();\n    this.setState({movies: data.results});\n    console.log(this.state.movies);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem('movies');\n    const movies = JSON.parse(json);\n    this.setState({movies});\n  }\n\n  componentDidUpdate = () => {\n    const movies = JSON.stringify(this.state.movies);\n    localStorage.setItem('movies', movies);\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <header className=\"App-header\">\n        </header>\n        <Form movieAPI={this.movieAPI} />\n        <Movies movies={this.state.movies} />\n      </div>      \n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport noImage from '../noImage.png';\n\nconst API_KEY = '37cbb44eaa2f92cdb9ef7ba91a012e48';\n\nclass Movie extends React.Component {\n\n    state = {\n        activeMovie: []\n    }\n\n    componentDidMount = async () => {\n        const title = this.props.location.state.movie;\n        const req = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${title}`);\n        const res = await req.json();\n        this.setState({ activeMovie: res.results[0] });\n        console.log(this.state.activeMovie);\n    }\n\n    render() {\n        const movie = this.state.activeMovie;\n        return (\n            <div className='container'>\n                {this.state.activeMovie.length !== 0 &&\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>\n                                    { movie.poster_path !== null \n                                        ? (<img className='movie-img' src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title}></img>)\n                                        : (<img className='movie-img' src={noImage} alt={movie.title}></img>)\n                                    }\n                                </th>\n                                <th className='movie-card-info'>\n                                    <h3>{movie.title}</h3>\n                                    <h4>{movie.release_date.substring(0,4)}</h4>\n                                    <p>{movie.overview}</p>\n                                    <button className='movies-card-button'>\n                                        <Link to='/' style={{textDecoration:'none'}}>Go back</Link>\n                                    </button>\n                                </th>\n                            </tr>\n                        </thead>\n                    </table>\n\n\n                    // <div className='row movie-card'>\n                    //     <div className='col-md-6'>\n                    //         <img className='movie-img'\n                    //             src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} \n                    //             alt={movie.title} \n                    //         />\n                    //     </div>\n                    //     <div className='col-md-6 movie-card-info'>\n                    //         <h3>{movie.title}</h3>\n                    //         <h4>{movie.release_date}</h4>\n                    //         <p>{movie.overview}</p>\n                    //         <button>\n                    //             <Link to='/'>Go back</Link>\n                    //         </button>\n                    //     </div>\n                    // </div>\n\n\n\n\n                }\n            </div>\n        );\n    }\n\n};\n\nexport default Movie;","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport App from '../App';\nimport Movie from './Movie';\n\nconst Router = () => (\n    <HashRouter>\n        <Switch>\n            <Route path='/' component={App} exact />\n            <Route path='/movie/:id' component={Movie} />            \n        </Switch>\n    </HashRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/noImage.fd72cd4d.png\";"],"sourceRoot":""}